generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["users", "services"]
}

model services {
  id           Int       @id @default(autoincrement())
  name         String
  description  String?
  duration     Int?
  durationtype Int?
  price        String
  pricetype    String
  thumbnail    String?
  createdat    DateTime  @default(now())
  createdby    Int
  updatedat    DateTime?
  updatedby    Int?
  status       Int       @default(1)

  @@schema("services")
}

// @@schema("users")
model apiclient {
  id          Int       @id @default(autoincrement())
  name        String
  key         String    @unique
  secret      String    @unique
  type        Int
  createdat   DateTime  @default(now())
  createdby   Int
  updatedat   DateTime?
  updatedby   Int?
  isactive    Boolean
  createduser user      @relation("createdbyapiclient", fields: [createdby], references: [id])
  updateduser user?     @relation("updatedbyapiclient", fields: [updatedby], references: [id])

  @@schema("users")
}

model refreshtoken {
  id        Int       @id @default(autoincrement())
  userid    Int
  token     String
  createdat DateTime  @default(now())
  updatedat DateTime?
  expiresat DateTime?
  user      user      @relation(fields: [userid], references: [id])

  @@schema("users")
}

model revokedtoken {
  id    Int      @id @default(autoincrement())
  token String   @unique
  date  DateTime @default(now())

  @@schema("users")
}

model role {
  id              Int              @id @default(autoincrement())
  name            String
  createdby       Int
  createdat       DateTime         @default(now())
  updatedby       Int?
  updatedat       DateTime?
  createduser     user             @relation("createdbyrole", fields: [createdby], references: [id])
  updateduser     user?            @relation("updatedbyrole", fields: [updatedby], references: [id])
  rolepermissions rolepermission[]
  userroles       userrole[]

  @@schema("users")
}

model permission {
  id              Int              @id @default(autoincrement())
  name            String
  value           String           @unique
  group           String
  description     String
  createdby       Int
  createdat       DateTime         @default(now())
  updatedby       Int?
  updatedat       DateTime?
  createduser     user             @relation("createdbypermission", fields: [createdby], references: [id])
  updateduser     user?            @relation("updatedbypermission", fields: [updatedby], references: [id])
  rolepermissions rolepermission[]
  userpermissions userpermission[]

  @@schema("users")
}

model rolepermission {
  id           Int        @id @default(autoincrement())
  roleid       Int
  permissionid Int
  createdat    DateTime   @default(now())
  createdby    Int
  updatedby    Int?
  updatedat    DateTime?
  createduser  user       @relation("createdbyrolepermission", fields: [createdby], references: [id])
  permission   permission @relation(fields: [permissionid], references: [id])
  role         role       @relation(fields: [roleid], references: [id])
  updateduser  user?      @relation("updatedbyrolepermission", fields: [updatedby], references: [id])

  @@schema("users")
}

model user {
  id                     Int              @id @default(autoincrement())
  firstname              String
  lastname               String
  phone                  String?
  email                  String           @unique
  password               String
  createdby              Int
  createdat              DateTime         @default(now())
  updatedby              Int?
  updatedat              DateTime?
  status                 Int              @default(1)
  createdapiclients      apiclient[]      @relation("createdbyapiclient")
  updatedapiclients      apiclient[]      @relation("updatedbyapiclient")
  createdpermissions     permission[]     @relation("createdbypermission")
  updatedpermissions     permission[]     @relation("updatedbypermission")
  refreshtokens          refreshtoken[]
  createdroles           role[]           @relation("createdbyrole")
  updatedroles           role[]           @relation("updatedbyrole")
  createdrolepermissions rolepermission[] @relation("createdbyrolepermission")
  updatedrolepermissions rolepermission[] @relation("updatedbyrolepermission")
  createduser            user             @relation("usercreateduser", fields: [createdby], references: [id])
  createdusers           user[]           @relation("usercreateduser")
  updateduser            user?            @relation("userupdateduser", fields: [updatedby], references: [id])
  updatedusers           user[]           @relation("userupdateduser")
  createduserpermissions userpermission[] @relation("createdbyuserpermission")
  updateduserpermissions userpermission[] @relation("updatedbyuserpermission")
  userpermissions        userpermission[] @relation("user")
  createduserroles       userrole[]       @relation("createdbyuserrole")
  updateduserroles       userrole[]       @relation("updatedbyuserrole")
  userroles              userrole[]       @relation("user")

  @@schema("users")
}

model userpermission {
  id           Int        @id @default(autoincrement())
  userid       Int
  permissionid Int
  createdby    Int
  createdat    DateTime   @default(now())
  updatedby    Int?
  updatedat    DateTime?
  createduser  user       @relation("createdbyuserpermission", fields: [createdby], references: [id])
  permission   permission @relation(fields: [permissionid], references: [id])
  updateduser  user?      @relation("updatedbyuserpermission", fields: [updatedby], references: [id])
  user         user       @relation("user", fields: [userid], references: [id])

  @@schema("users")
}

model userrole {
  id          Int       @id @default(autoincrement())
  userid      Int
  roleid      Int
  createdby   Int
  createdat   DateTime  @default(now())
  updatedby   Int?
  updatedat   DateTime?
  createduser user      @relation("createdbyuserrole", fields: [createdby], references: [id])
  role        role      @relation(fields: [roleid], references: [id])
  updateduser user?     @relation("updatedbyuserrole", fields: [updatedby], references: [id])
  user        user      @relation("user", fields: [userid], references: [id])

  @@schema("users")
}
